#!/bin/bash
# stdin in the form
#  <oldrev> <newrev> <refname>
# For example:
#  aa453216d1b3e49e7f6f98441fa56946ddcd6a20 68f7abf4e6f922807889f52bc043ecd31b79f814 refs/heads/master

#this should be a configmap
#move repositoy and registry values away

read OLDREV NEWREV REFNAME

## Source automation 
#mkdir head && git archive --format=tar HEAD | tar -x -C head/
#if [[ -f head/.post-receive ]]; then
#    echo "- running local post-receive"
#    echo $OLDREV $NEWREV $REFNAME | head/.post-receive $OLDREV $NEWREV $REFNAME
#    rm -rf head
#    exit $?
#fi

# Set variables
REPOSITORY=$PWD
REGISTRY="registry.source-system"
NAME=${REPOSITORY##*/}
SHORTREV=${NEWREV:0:7}
TREE=$(git ls-tree -r --name-only $NEWREV)
PRFLAGS=$(git cat-file commit $NEWREV | sed -n '/^$/ {n; :a; p; n; ba}' | grep -E -o '\--pr[^ ]+')

# Check if tag
if [[ -n `grep tags <<< $REFNAME` ]]
then
    REVISION=${REFNAME##*/}
    SHORTREV=$REVISION
else
    REVISION=$NEWREV
fi

# Search for task triggers and create task block on hit
declare -A PIPELINE
#  repository content
if [[ -n `grep '/Dockerfile$' <<< $TREE` ]]
then
    PIPELINE[BUILD_IMAGE]=1
    TASK_BUILD_IMAGE=$(cat << EOF
      - name: build-image
        taskRef:
          name: build-image
        runAfter:
          - get-git
        params:
          - name: repository
            value: \$(params.repository)
          - name: revision
            value: $SHORTREV
          - name: registry
            value: \$(params.registry)
        workspaces:
          - name: workspace
EOF
)
fi

if [[ -n `grep '/Chart.yaml$' <<< $TREE` ]] \
   && [[ -n `git diff $NEWREV $OLDREV | grep '^diff.*Chart.yaml.*Chart.yaml'` ]]
then
    PIPELINE[PUSH_CHART]=1
    TASK_PUSH_CHART=$(cat << EOF
      - name: push-chart
        taskRef:
          name: push-chart
        runAfter:
          - get-git
        params:
          - name: repository
            value: \$(params.repository)
          - name: registry
            value: \$(params.registry)
        workspaces:
          - name: workspace
EOF
)
fi
# commit message flags
if [[ -n `grep 'prUpgradeIn' <<< $PRFLAGS` ]]
then
    PIPELINE[UPGRADE_CHART]=1
    eval "`grep -Eo 'prUpgradeIn[^ ]+' <<< $PRFLAGS`"
    TASK_UPGRADE_CHART=$(cat << EOF
      - name: upgrade-chart
        taskRef:
          name: upgrade-chart
        runAfter:
          - build-image
        params:
          - name: target
            value: $prUpgradeIn
          - name: revision
            value: $SHORTREV
        workspaces:
          - name: workspace
EOF
)
fi


if [[ -n ${PIPELINE[@]} ]]; then
    echo "+ running post-receive pipeline:"
    cat << EOF | kubectl apply -f -
---
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: $NAME-$SHORTREV
  namespace: tekton-runs
spec:
  params:
    - name: repository
      value: "$REPOSITORY"
    - name: revision
      value: "$REVISION"
    - name: registry
      value: "$REGISTRY"
  pipelineSpec:
    tasks:
      - name: get-git
        taskRef:
          name: get-git
        params:
          - name: repository
            value: \$(params.repository)
          - name: revision
            value: \$(params.revision)
        workspaces:
          - name: workspace
$([[ -n ${PIPELINE[BUILD_IMAGE]} ]] && echo "$TASK_BUILD_IMAGE")
$([[ -n ${PIPELINE[PUSH_CHART]} ]] && echo "$TASK_PUSH_CHART")
$([[ -n ${PIPELINE[UPGRADE_CHART]} ]] && echo "$TASK_UPGRADE_CHART")
  workspaces:
    - name: workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
---
EOF
fi
